{"version":3,"file":"custom-styles.js","mappings":"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","sources":["webpack://advanced-gutenberg/./assets/blocks/customstyles/custom-styles.jsx"],"sourcesContent":["(function ( wpI18n, wpHooks, wpBlocks, wpBlockEditor, wpComponents, wpCompose ) {\n    wpBlockEditor = wp.blockEditor || wp.editor;\n    const { addFilter } = wpHooks;\n    const { __ } = wpI18n;\n    const { hasBlockSupport } = wpBlocks;\n    const { InspectorControls } = wpBlockEditor;\n    const { SelectControl } = wpComponents;\n    const { createHigherOrderComponent } = wpCompose;\n\n    const SUPPORTED_BLOCKS = [\n        'core/paragraph',\n        'core/heading',\n        'core/list',\n        'core/code',\n        'core/preformatted',\n        'core/table',\n        'core/columns',\n        'core/column',\n        'core/group',\n        'core/image',\n    ];\n\n\n    // Register custom styles to blocks attributes\n    addFilter( 'blocks.registerBlockType', 'advgb/registerCustomStyleClass', function ( settings ) {\n        if (SUPPORTED_BLOCKS.includes( settings.name )) {\n            settings.attributes = Object.assign( settings.attributes, {\n                customStyle: {\n                    type: 'string'\n                },\n                identifyColor: {\n                    type: 'string'\n                }\n            } );\n        }\n\n        return settings;\n    } );\n\n    // Add option to return to default style\n    if (typeof advgbBlocks.customStyles !== 'undefined' && advgbBlocks.customStyles) {\n        advgbBlocks.customStyles.unshift( {\n            id: 0,\n            label: __( 'Select a block style', 'advanced-gutenberg' ),\n            value: '',\n            identifyColor: ''\n        } );\n    }\n\n    // Add option to select custom styles for supported blocks\n    addFilter( 'editor.BlockEdit', 'advgb/customStyles', function ( BlockEdit ) {\n        return ( props ) => {\n            return ( [\n                <BlockEdit key=\"block-edit-custom-class-name\" {...props} />,\n                props.isSelected && SUPPORTED_BLOCKS.includes( props.name ) &&\n                <InspectorControls key=\"advgb-custom-controls\">\n                    <div className=\"advgb-custom-styles-wrapper\">\n                        <SelectControl\n                            label={ [\n                                __( 'Block styles', 'advanced-gutenberg' ),\n                                <span className={'components-panel__color-area'}\n                                      key=\"customstyle-identify\"\n                                      style={ {\n                                          background: props.attributes.identifyColor,\n                                          verticalAlign: 'text-bottom',\n                                          borderRadius: '50%',\n                                          border: 'none',\n                                          width: '16px',\n                                          height: '16px',\n                                          display: 'inline-block',\n                                          marginLeft: '10px',\n                                      } } />\n                            ] }\n                            help={__( 'This option let you add custom style for the current block', 'advanced-gutenberg' )}\n                            value={props.attributes.customStyle}\n                            options={advgbBlocks.customStyles.map( ( cstyle, index ) => {\n                                if (cstyle.title) advgbBlocks.customStyles[ index ].label = cstyle.title;\n                                if (cstyle.name) advgbBlocks.customStyles[ index ].value = cstyle.name;\n\n                                return cstyle;\n                            } )}\n                            onChange={( cstyle ) => {\n                                const { identifyColor } = advgbBlocks.customStyles.filter( ( style ) => style.value === cstyle )[0];\n                                props.setAttributes( {\n                                    customStyle: cstyle,\n                                    identifyColor: identifyColor,\n                                    backgroundColor: undefined,\n                                    textColor: undefined,\n                                    fontSize: undefined,\n                                } );\n                            }}\n                        />\n                    </div>\n                </InspectorControls>\n            ] )\n        }\n    } );\n\n    // Apply custom styles on front-end\n    addFilter( 'blocks.getSaveContent.extraProps', 'advgb/loadFrontendCustomStyles', function ( extraProps, blockType, attributes ) {\n        if (hasBlockSupport( blockType, 'customStyle', true ) && attributes.customStyle) {\n            if (typeof extraProps.className === 'undefined') {\n                extraProps.className = attributes.customStyle;\n            } else {\n                extraProps.className += ' ' + attributes.customStyle;\n                extraProps.className = extraProps.className.trim();\n            }\n        }\n\n        return extraProps;\n    } );\n\n\n    const withStyleClasses = createHigherOrderComponent( ( BlockListBlock ) => {\n        return ( props ) => {\n            if ( ! SUPPORTED_BLOCKS.includes( props.name ) || !hasBlockSupport( props.name, 'customStyle', true ) ) {\n                return <BlockListBlock { ...props } />\n            }\n\n            const {\n                customStyle,\n            } = props.attributes;\n\n            return <BlockListBlock { ...props } className={ `${ customStyle }` } />;\n        };\n    }, 'withStyleClasses' );\n\n    // Apply custom styles on back-end\n    wp.hooks.addFilter( 'editor.BlockListBlock', 'advgb/loadBackendCustomStyles', withStyleClasses );\n\n})( wp.i18n, wp.hooks, wp.blocks, wp.blockEditor, wp.components, wp.compose );\n"],"names":["wpI18n","wpHooks","wpBlocks","wpBlockEditor","wpComponents","wpCompose","wp","blockEditor","editor","addFilter","__","hasBlockSupport","InspectorControls","SelectControl","createHigherOrderComponent","SUPPORTED_BLOCKS","settings","includes","name","attributes","Object","assign","customStyle","type","identifyColor","advgbBlocks","customStyles","unshift","id","label","value","BlockEdit","props","React","createElement","_extends","key","isSelected","className","style","background","verticalAlign","borderRadius","border","width","height","display","marginLeft","help","options","map","cstyle","index","title","onChange","filter","setAttributes","backgroundColor","undefined","textColor","fontSize","extraProps","blockType","trim","withStyleClasses","BlockListBlock","concat","hooks","i18n","blocks","components","compose"],"sourceRoot":""}