{"version":3,"file":"block-controls.js","mappings":"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","sources":["webpack://advanced-gutenberg/./node_modules/classnames/index.js","webpack://advanced-gutenberg/./node_modules/hour-convert/index.js","webpack://advanced-gutenberg/webpack/bootstrap","webpack://advanced-gutenberg/webpack/runtime/compat get default export","webpack://advanced-gutenberg/webpack/runtime/define property getters","webpack://advanced-gutenberg/webpack/runtime/hasOwnProperty shorthand","webpack://advanced-gutenberg/./assets/blocks/0-adv-components/datetime.jsx","webpack://advanced-gutenberg/./assets/blocks/0-adv-components/utils.jsx","webpack://advanced-gutenberg/./assets/blocks/block-controls/block-controls.jsx"],"sourcesContent":["/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\tvar nativeCodeString = '[native code]';\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","'use strict';\n\nmodule.exports = {\n\n    /**\n     * Convert 24-hour time to 12-hour format.\n     *\n     * @param {number} hour Hour to convert (0-23)\n     * @return {object} { hour, meridiem } (meridian is also returned for backwards compatibility)\n     */\n    to12Hour: function to12Hour(hour) {\n        var meridiem = hour < 12 ? 'am' : 'pm';\n        return {\n            hour: ((hour + 11) % 12 + 1),\n            meridiem: meridiem,\n            meridian: meridiem\n        };\n    },\n\n    /**\n     * Convert 12-hour time to 24-hour format.\n     *\n     * @param {object} time Time object\n     * @param {number} time.hour Hour to convert (1-12)\n     * @param {string} time.meridiem Hour meridiem (am/pm). 'time.meridian' is\n     *  supported for backwards compatibility.\n     * @return {number}\n     */\n    to24Hour: function to24Hour(time) {\n        var meridiem = time.meridiem || time.meridian;\n        return (meridiem === 'am' ? 0 : 12) + (time.hour % 12);\n    }\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import hourConvert from 'hour-convert';\n\nconst { ButtonGroup, Button, DateTimePicker, TextControl, CheckboxControl, Popover, Tooltip, SelectControl, Icon } = wp.components;\nconst { Component, Fragment, useState } = wp.element;\nconst { __, _x } = wp.i18n;\nconst { applyFilters } = wp.hooks;\n\nexport function AdvDateTimeControl(props) {\n    const [popupState, setPopupState] = useState( false );\n    const togglePopup = () => {\n        setPopupState( ! popupState );\n    };\n\n    const {\n        buttonLabel,\n        dateLabel,\n        date,\n        onChangeDate,\n        onDateClear,\n        onInvalidDate\n    } = props;\n\n    return (\n        <Fragment>\n            <div className=\"advgb-advcalendar-control\">\n                <label>\n                    { dateLabel }\n                </label>\n                <div>\n                    <Button\n                        isLink\n                        icon=\"calendar\"\n                        onClick={ togglePopup }\n                    >\n                        <Tooltip text={ __( 'Change date', 'advanced-gutenberg' ) }>\n                            <span>\n                                { date ? moment( date ).format( \"MMMM DD YYYY, h:mm a\" ) : buttonLabel }\n                            </span>\n                        </Tooltip>\n                    </Button>\n                    { date &&\n        \t\t\t\t<Button\n        \t\t\t\t\ticon=\"no-alt\"\n                            className=\"advgb-advcalendar-remove-icon\"\n        \t\t\t\t\tonClick={ () => onDateClear() }\n        \t\t\t\t/>\n        \t\t\t}\n                </div>\n            </div>\n            { popupState &&\n                <Popover\n                    className=\"advgb-advcalendar-popover\"\n                    onClose={ setPopupState.bind( null, false ) }\n                    resize={ false }\n                >\n                    <label className=\"advgb-advcalendar-popover-label\">\n                        { dateLabel }\n                        <Button\n        \t\t\t\t\ticon=\"no-alt\"\n                            className=\"advgb-advcalendar-remove-icon\"\n        \t\t\t\t\tonClick={ togglePopup }\n        \t\t\t\t/>\n                    </label>\n                    <DateTimePicker\n                        currentDate={ date }\n                        onChange={ onChangeDate }\n                        is12Hour={ true }\n                        isInvalidDate={ onInvalidDate }\n                    />\n                </Popover>\n            }\n        </Fragment>\n\n    )\n}\n\nexport function AdvDaysControl(props) {\n    const allDays = [\n        { slug: 0, label: _x( 'S', 'Sunday first letter', 'advanced-gutenberg' ) }, // Sunday\n        { slug: 1, label: __( 'M', 'advanced-gutenberg' ) }, // Monday\n        { slug: 2, label: _x( 'T', 'Tuesday first letter', 'advanced-gutenberg' ) }, // Tuesday\n        { slug: 3, label: __( 'W', 'advanced-gutenberg' ) }, // Wednesday\n        { slug: 4, label: _x( 'T', 'Thursday first letter', 'advanced-gutenberg' ) }, // Thursday\n        { slug: 5, label: __( 'F', 'advanced-gutenberg' ) }, // Friday\n        { slug: 6, label: _x( 'S', 'Saturday first letter', 'advanced-gutenberg' ) }  // Saturday\n    ];\n\n    const {\n        label,\n        days,\n        onChangeDays\n    } = props;\n\n    // Use a single state variable to store the selected days\n    const [ selectedDays, setSelectedDays ] = useState( days );\n\n    /**\n    * Check if the day is selected or not\n    *\n    * @since 3.1.2\n    *\n    * @param {string} Day slug e.g. 'u' for Sunday, 't' for Tuesday\n    *\n    * @return {bool}\n    */\n    function isDaySelected( slug ) {\n        return selectedDays.some( el => el === slug );\n    }\n\n    /**\n    * Update the selected days state when a checkbox is changed\n    *\n    * @since 3.1.2\n    *\n    * @param {string} Day slug e.g. 'u' for Sunday, 't' for Tuesday\n    *\n    * @return {void}\n    */\n    function onChangeDay( slug ) {\n\n        // Check if the day is already selected\n        const isSelected = isDaySelected( slug );\n\n        // Create a new array with the updated selection\n        let updatedDays;\n        if ( isSelected ) {\n            // Remove the day from the selected days\n            updatedDays = selectedDays.filter( el => el !== slug );\n        } else {\n            // Add the day to the selected days\n            const findDay = allDays.find( el => el.slug === slug );\n            updatedDays = [ ...selectedDays, findDay.slug ];\n        }\n\n        // Remove duplicates\n        const uniqueDays = [ ...new Set( updatedDays ) ];\n\n        // Update the selected days state\n        setSelectedDays( uniqueDays );\n\n        // Call the onChangeDays prop to notify the parent component of the change\n        if ( onChangeDays ) {\n            onChangeDays( updatedDays );\n        }\n    }\n\n    return (\n        <Fragment>\n            <div className=\"advgb-checkbox-wrapper\">\n                <label>\n                    { label }\n                </label>\n                <div className=\"advgb-checkbox-inline\">\n                    { allDays.map( day => (\n                        <CheckboxControl\n                            label={ day.label }\n                            checked={ isDaySelected( day.slug ) }\n                            onChange={ () => onChangeDay( day.slug ) }\n                        />\n                    ) ) }\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n\nclass AdvTimeClass extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            onChangeTime: null,\n            currentTime: this.props.currentTime || null,\n            hours: null,\n            minutes: null,\n            meridian: 'am',\n            onInit: true\n        };\n    }\n\n    componentWillMount() {\n        const { onChangeTime, currentTime, onInit } = this.state;\n\n        if( this.props.onChangeTime !== onChangeTime ) {\n            this.setState( {\n                onChangeTime: this.props.onChangeTime,\n            } );\n        }\n\n        if( this.props.currentTime !== currentTime ) {\n            this.setState( {\n                currentTime: this.props.currentTime,\n            } );\n        }\n\n        // Init\n        if( currentTime && currentTime.includes(':') && onInit ) {\n            this.setState( {\n                hours:      currentTime.split(':')[0],\n                minutes:    currentTime.split(':')[1],\n                meridian:   parseInt( currentTime.split(':')[0] ) > 11 ? 'pm' : 'am', // We set > 11 because PM starts from 12:00:00\n                onInit:     false\n            } );\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const { onChangeTime, currentTime } = this.props;\n        const { hours, minutes, meridian } = this.state;\n        const { hours: prevHours, minutes: prevMinutes, meridian: prevMeridian } = prevState;\n\n        if( hours !== prevHours || minutes !== prevMinutes || meridian !== prevMeridian ) {\n\n            // When clearing time\n            if( ! hours && ! minutes ) {\n                return;\n            }\n\n            // Default minutes when hours selected\n            if( hours && ! minutes ) {\n                this.setState( {\n                    minutes: '00'\n                } );\n            }\n\n            // Default hours when minutes selected\n            if( minutes && ! hours ) {\n                this.setState( {\n                    hours: '01'\n                } );\n            }\n\n            /* Convert 12-hours to 24-hours.\n             * e.g. 12:00 AM becomes 00:00:00\n             *      12:00 PM becomes 12:00:00\n             *      01:00 PM becomes 13:00:00\n             */\n            const savedTime   = `${this.appendZero(\n                                    hourConvert.to24Hour( {\n                                        hour: parseInt( hours ),\n                                        meridiem: meridian\n                                    } )\n                                )}:${minutes}:00`;\n\n            // Value saved in source/attribute\n            this.props.onChangeTime( savedTime );\n        }\n    }\n\n    /**\n     * Append zero to one digit numbers. e.g. 9 becomes '09'\n     *\n     * @since 3.1.2\n     *\n     * @param {string value Hours or minutes\n     *\n     * @return {string}\n     */\n    appendZero( value ) {\n        if( isNaN( value ) ) {\n            return;\n        }\n\n        const res = parseInt( value );\n\n        return res > 9 ? res : `0${res}`;\n    }\n\n    render() {\n        const { onChangeTime, currentTime, hours, minutes, meridian } = this.state;\n\n        // Make sure hours are valid. 01: min, 12: max\n        const handleChangeHours = event => {\n            const value = Math.max( 1, Math.min( 12, Number( event.target.value ) ) );\n            this.setState( {\n                hours: this.appendZero( value )\n            } );\n        };\n\n        // Allow to use up/down keys for hours\n        const handleKeyDownHours = event => {\n            const value = Number( event.target.value );\n            if( event.key === 'ArrowUp' && value < 12 ) {\n                this.setState( {\n                    hours: this.appendZero( value + 1 )\n                } );\n            } else if ( event.key === 'ArrowDown' && value > 1 ) {\n                this.setState( {\n                    hours: this.appendZero( value - 1 )\n                } );\n            }\n        };\n\n        // Make sure minutes are valid. 01: min, 59: max\n        const handleChangeMinutes = event => {\n            const value = Math.max( 0, Math.min( 59, Number( event.target.value ) ) );\n            this.setState( {\n                minutes: this.appendZero( value )\n            } );\n        };\n\n        // Allow to use up/down keys for minutes\n        const handleKeyDownMinutes = event => {\n            const value = Number( event.target.value );\n            if( event.key === 'ArrowUp' && value < 59 ) {\n                this.setState( {\n                    minutes: this.appendZero( value + 1 )\n                } );\n            } else if ( event.key === 'ArrowDown' && value > 0 ) {\n                this.setState( {\n                    minutes: this.appendZero( value - 1 )\n                } );\n            }\n        };\n\n        return (\n            <Fragment>\n                <div className=\"advgb-advtime-control\">\n                    <label>\n                        { this.props.label }\n                    </label>\n                    <div className=\"advgb-advtime-hours-minutes\">\n                        <input\n                            type=\"text\"\n                            value={\n                                hours\n                                    ? this.appendZero(\n                                        hourConvert.to12Hour( parseInt( hours ) ).hour\n                                    ) : ''\n                            }\n                            onChange={ handleChangeHours }\n                            onKeyDown={ handleKeyDownHours }\n                            placeholder=\"--\"\n                        />\n                        <span>:</span>\n                        <input\n                            type=\"text\"\n                            value={\n                                minutes ? minutes : ''\n                            }\n                            onChange={ handleChangeMinutes }\n                            onKeyDown={ handleKeyDownMinutes }\n                            placeholder=\"--\"\n                        />\n                    </div>\n                    <ButtonGroup className=\"advgb-advtime-meridian\">\n                        <Button\n                            variant={\n                                meridian === null || meridian === 'am' ? 'primary' : 'secondary'\n                            }\n                            onClick={ () => {\n                                this.setState( {\n                                    meridian: 'am'\n                                } );\n                            } }\n                            disabled={ hours && minutes ? false : true }\n                        >\n                            { __( 'AM', 'advanced-gutenberg' ) }\n                        </Button>\n                        <Button\n                            variant={\n                                meridian === 'pm' ? 'primary' : 'secondary'\n                            }\n                            onClick={ () => {\n                                this.setState( {\n                                    meridian: 'pm'\n                                } );\n                            } }\n                            disabled={ hours && minutes ? false : true }\n                        >\n                            { __( 'PM', 'advanced-gutenberg' ) }\n                        </Button>\n                    </ButtonGroup>\n                    { hours && minutes &&\n        \t\t\t\t<Button\n                            className=\"advgb-advtime-remove-icon\"\n        \t\t\t\t\ticon=\"no-alt\"\n                            onClick={\n                                () => {\n                                    this.props.onTimeClear();\n                                    this.setState( {\n                                        hours: null,\n                                        minutes: null,\n                                        meridian: 'am'\n                                    } );\n                                }\n                            }\n        \t\t\t\t/>\n        \t\t\t}\n                </div>\n            </Fragment>\n        )\n    }\n}\nexport default AdvTimeClass;\n\nexport function AdvTimeControl(props) {\n    const { label, currentTime, onChangeTime, onTimeClear } = props;\n\n    return(\n        <AdvTimeClass\n            label={ label }\n            currentTime={ currentTime }\n            onChangeTime={ onChangeTime }\n            onTimeClear={ onTimeClear }\n        />\n    );\n}\n\nexport function AdvTimezoneControl(props) {\n    const { label, defaultTimezone } = props;\n\n    return (\n        <Fragment>\n            { applyFilters( 'advgb.timezoneControl',\n                <Fragment>\n                    <div style={{ marginTop: 10, marginBottom: 30 }}>\n                        <div style={{ marginBottom: 6 }}>\n                            { label }\n                            <span style={{ float: 'right', marginRight: 5 }}>\n                                <Icon icon=\"lock\" />\n                                <a href=\"https://publishpress.com/links/blocks\"\n                                    class=\"advgb-pro-ad-btn\"\n                                    target=\"_blank\">\n                                    { __( 'Upgrade to Pro', 'advanced-gutenberg' ) }\n                                </a>\n                            </span>\n                        </div>\n                        <SelectControl\n                            value={ defaultTimezone }\n                            options={ [ {\n                                    label: defaultTimezone,\n                                    value: defaultTimezone\n                                }\n                            ] }\n                            disabled={ true }\n                        />\n                    </div>\n                </Fragment>,\n                props\n            ) }\n        </Fragment>\n    )\n}\n","/**\n * Generate option title suggestions\n *\n * @since 3.1.1\n * @param options Available options as objects with slug and title. e.g. [{slug: 'subscriber', title: 'Subscriber'}, {slug: 'new_customer', title: 'New Customer'}]\n *\n * @return {array}  Option slugs. e.g. ['subscriber','new_customer']\n */\nexport const getOptionSuggestions = function( options ) {\n    return options.map( ( item ) => item.title );\n}\n\n/**\n * Match option slugs with its option titles\n * to display as field value (but NOT saved!).\n *\n * @since 3.1.1\n * @param slugs     Option slugs. e.g. ['subscriber','new_customer'] or [82, 92]\n * @param options   Available options as objects with slug and title. e.g. [{slug: 'subscriber', title: 'Subscriber'}, {slug: 'new_customer', title: 'New Customer'}]\n *\n * @return {array}  Option titles. e.g. ['Subscriber','New Customer']\n */\nexport const getOptionTitles = function( slugs, options ) {\n    let field_value = [];\n\n    if ( options !== null ) {\n        field_value = slugs.map( ( option_slug ) => {\n            let find_option = options.find( ( item ) => {\n                return item.slug === option_slug;\n            } );\n            if ( find_option === undefined || ! find_option ) {\n                return option_slug; // It should return false but creates empty selections\n            }\n            return find_option.title;\n        } );\n    }\n\n    return field_value;\n}\n\n/**\n * Match option titles with its slugs, and save slugs\n *\n * @since 3.1.1\n * @param slugs     Option slugs. e.g. ['subscriber','new_customer']\n * @param options   Available options as objects with slug and title. e.g. [{slug: 'subscriber', title: 'Subscriber'}, {slug: 'new_customer', title: 'New Customer'}]\n *\n * @return {array}  Option slugs. e.g. ['subscriber','new_customer']\n */\nexport const getOptionSlugs = function( slugs, options ) {\n    let slugs_array = [];\n\n    slugs.map(\n        ( option_title ) => {\n            const matching_slug = options.find( ( item ) => {\n                return item.title === option_title;\n            } );\n            if ( matching_slug !== undefined ) {\n                slugs_array.push( matching_slug.slug );\n            }\n        }\n    )\n\n    return slugs_array;\n}\n","import classnames from 'classnames';\nimport { AdvDateTimeControl, AdvDaysControl, AdvTimeControl, AdvTimezoneControl } from \"../0-adv-components/datetime.jsx\";\nimport {\n    getOptionSuggestions,\n    getOptionTitles,\n    getOptionSlugs\n} from \"../0-adv-components/utils.jsx\";\n\n(function ( wpI18n, wpHooks, wpBlocks, wpBlockEditor, wpComponents, wpCompose, wpElement ) {\n    wpBlockEditor = wp.blockEditor || wp.editor;\n    const { addFilter } = wpHooks;\n    const { sprintf, __ } = wpI18n;\n    const { hasBlockSupport } = wpBlocks;\n    const { InspectorControls, BlockControls } = wpBlockEditor;\n    const { DateTimePicker, ToggleControl, PanelBody, Notice, FormTokenField, SelectControl } = wpComponents;\n    const { createHigherOrderComponent } = wpCompose;\n    const { Component, Fragment } = wpElement;\n\n    // do not show this feature if disabled.\n    if( !parseInt(advgbBlocks.block_controls) ) return;\n\n    // Blocks that are not supported\n    let NON_SUPPORTED_BLOCKS = [\n        'core/freeform',\n        'core/legacy-widget',\n        'core/widget-area',\n        'core/column',\n        'advgb/tab',\n        'advgb/column'\n    ];\n\n    const getGlobalControls = function () {\n        return typeof advgb_block_controls_vars.controls !== 'undefined'\n                            && Object.keys(advgb_block_controls_vars.controls).length > 0\n                                ? advgb_block_controls_vars.controls\n                                : [];\n    }\n\n    /**\n     * Check if a control is enabled\n     *\n     * @since 3.1.0\n     * @param {string} control  The use case block control. e.g. 'schedule'\n     *\n     * @return {bool}\n     */\n    const isControlEnabled = function( control ) {\n        return typeof control !== 'undefined' && control;\n    }\n\n    /**\n     * Check if at least one control is enabled per block instance\n     *\n     * @since 3.1.1\n     * @param {string} controlAttrs     Controls attributes. e.g. advgbBlockControls or props.attributes @TODO Figure out a way to NOT require controlAttrs as param due is the same always\n     *\n     * @return {bool}\n     */\n    const isAnyControlEnabledBlock = function( controlAttrs ) {\n        const globalControls    = getGlobalControls();\n        let counter             = 0;\n        let blockControls       = []; // Controls enabled in block instance\n\n        // Get enabled global controls (in Settings)\n        Object.keys(globalControls).forEach( (item) => {\n            if( isControlEnabled( advgb_block_controls_vars.controls[item] ) ) {\n                blockControls.push(item);\n            }\n        } );\n\n        // Get counter for enabled controls in block instance\n        blockControls.forEach( (item) => {\n            if( currentControlKey( controlAttrs, item, 'enabled' ) ) {\n                counter++;\n            }\n        } );\n\n        return counter > 0 ? true : false;\n    }\n\n    /**\n     * Check if at least one control is enabled globally (in Settings)\n     *\n     * @since 3.1.0\n     *\n     * @return {bool}\n     */\n    const isAnyControlEnabledGlobal = function() {\n        const globalControls    = getGlobalControls();\n        let counter             = 0;\n\n        Object.keys(globalControls).map( (item) => {\n            if( isControlEnabled( advgb_block_controls_vars.controls[item] ) ) {\n                counter++;\n            }\n        } );\n\n        return counter > 0 ? true : false;\n    }\n\n    /**\n     * Return single controls array attribute value\n     *\n     * @since 3.1.0\n     * @param {string} controlAttrs     Controls attributes. e.g. advgbBlockControls or props.attributes @TODO Figure out a way to NOT require controlAttrs as param due is the same always\n     * @param {string} control          The use case block control. e.g. 'schedule'\n     * @param {string} key              The control key to check. e.g. 'enabled'\n     *\n     * @return {mixed}\n     */\n    const currentControlKey = function( controlAttrs, control, key ) {\n\n        // Check if advgbBlockControls attribute exists\n        const controlsAdded = typeof controlAttrs !== 'undefined' && controlAttrs.length\n                                ? true\n                                : false;\n        // Check if control exists in advgbBlockControls array\n        const controlExists = controlsAdded\n                            && controlAttrs.some( (element) => element.control === control )\n                                ? true\n                                : false;\n\n        if( controlExists ) {\n            const itemIndex = controlAttrs.findIndex(element => element.control === control);\n\n            // No control found (this check seems not necessary but is here to prevent an unlikely error)\n            if( itemIndex < 0 ) {\n                return false;\n            }\n\n            let newArray    = [...controlAttrs];\n            const obj       = newArray[itemIndex];\n\n            return obj[key];\n        }\n\n        return null;\n    }\n\n    // Add non supported blocks according to Block controls\n    if( typeof advgb_block_controls_vars !== 'undefined'\n        && typeof advgb_block_controls_vars.non_supported !== 'undefined'\n        && advgb_block_controls_vars.non_supported.length > 0\n    ) {\n        // Merge dynamically disabled blocks\n        NON_SUPPORTED_BLOCKS = [...NON_SUPPORTED_BLOCKS, ...advgb_block_controls_vars.non_supported];\n        // Remove duplicated values\n        NON_SUPPORTED_BLOCKS = [...new Set(NON_SUPPORTED_BLOCKS)];\n    }\n\n    // Register block controls to blocks attributes\n    addFilter( 'blocks.registerBlockType', 'advgb/blockControls', function ( settings ) {\n        if ( ! NON_SUPPORTED_BLOCKS.includes( settings.name ) && isAnyControlEnabledGlobal() ) {\n            settings.attributes = Object.assign( settings.attributes, {\n                advgbBlockControls: {\n                    type: 'array',\n                    items: {\n                        type: 'object'\n                    },\n                    default: []\n                }\n            } );\n        }\n\n        return settings;\n    } );\n\n    const withEditControls = createHigherOrderComponent( ( BlockEdit ) => {\n\n        return class BlockControlsEdit extends Component {\n\n            constructor(props) {\n              super(...props);\n\n              this.state = {\n                  taxModOptions: [], // Store modified taxonomy options to decide if selected tax is for \"all terms\" or \"selected terms\"\n                  termOptions: [], // Store term options with slug (id) and title\n                  searchTermWord: '', // Updated when searching terms\n                  initArchive: true, // When true, trigger initArchiveControl()\n                  updateTaxLabels: false // When true, update taxonomy option labels\n              }\n\n              this.isPost = this.isPost.bind(this);\n            }\n\n            /**\n             * Get filtered term slugs based on selected taxonomies\n             *\n             * @since 3.1.1\n             * @param {array} taxonomies Array of taxonomies slugs\n             *\n             * @return {array}\n             */\n            getTermSlugs( taxonomies ) {\n                const allTaxonomies = this.getTaxonomies();\n                let terms = [];\n\n                taxonomies.forEach( ( tax ) => {\n                    const allTaxonomies = this.getTaxonomies();\n                    const itemIndex = allTaxonomies.findIndex( ( element ) => element.slug === tax );\n\n                    allTaxonomies[itemIndex].terms.forEach( ( term ) => {\n                        terms.push( term.slug );\n                    } );\n                } );\n\n                return terms;\n            }\n\n            /**\n             * Get taxonomies\n             *\n             * @since 3.1.1\n             *\n             * @return {array}\n             */\n            getTaxonomies() {\n                return typeof advgb_block_controls_vars.taxonomies !== 'undefined'\n                        && advgb_block_controls_vars.taxonomies.length > 0\n                            ? advgb_block_controls_vars.taxonomies\n                            : [];\n            }\n\n            /**\n             * Get all the available user roles from the site\n             *\n             * @since 3.1.0\n             *\n             * @return {array}\n             */\n            getUserRoles() {\n                return typeof advgb_block_controls_vars.user_roles !== 'undefined'\n                        && advgb_block_controls_vars.user_roles.length > 0\n                            ? advgb_block_controls_vars.user_roles\n                            : [];\n            }\n\n            /**\n             * Get filtered terms based on selected taxonomies\n             *\n             * @since 3.1.1\n             * @param {array} taxonomies Taxonomies slugs\n             *\n             * @return {array}\n             */\n            getTerms( taxonomies ) {\n                const allTaxonomies = this.getTaxonomies();\n                let terms = [];\n\n                taxonomies.forEach( ( tax ) => {\n                    const allTaxonomies = this.getTaxonomies();\n                    const itemIndex = allTaxonomies.findIndex( ( element ) => element.slug === tax );\n\n                    allTaxonomies[itemIndex].terms.forEach( ( term ) => {\n                        terms.push( {\n                            slug: term.slug,\n                            title: `${term.title} (${allTaxonomies[itemIndex].title})`\n                        } );\n                    } );\n                } );\n\n                return terms;\n            }\n\n            /**\n             * Get pages\n             *\n             * @since 3.1.1\n             *\n             * @return {array}\n             */\n            getPages() {\n                return typeof advgb_block_controls_vars.page !== 'undefined'\n                        && advgb_block_controls_vars.page.length > 0\n                            ? advgb_block_controls_vars.page\n                            : [];\n            }\n\n            /**\n             * Update advgbBlockControls attribute when a key value changes\n             *\n             * @since 2.14.0\n             * @param {string} control  The use case block control. e.g. 'schedule'\n             * @param {string} key      The control key to modify. e.g. 'enabled'\n             * @param {string} value    The control key value (not required for boolean keys)\n             *\n             * @return {void}\n             */\n            changeControlKey( control, key, value = '' ) {\n                const { attributes, setAttributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                // Control objects to add  when enabled for the first time\n                const scheduleControl = {\n                    control: 'schedule',\n                    enabled: true,\n                    dateFrom: null,\n                    dateTo: null,\n                    recurring: false\n                };\n                const userRoleControl = {\n                    control: 'user_role',\n                    enabled: true,\n                    roles: [],\n                    approach: 'public'\n                };\n                const archiveControl = {\n                    control: 'archive',\n                    enabled: true,\n                    taxonomies: [],\n                    approach: 'exclude'\n                };\n                const pageControl = {\n                    control: 'page',\n                    enabled: true,\n                    pages: [],\n                    approach: 'exclude'\n                };\n\n                // Check if advgbBlockControls attribute exists\n                const controlsAdded = typeof advgbBlockControls !== 'undefined' && advgbBlockControls.length\n                                        ? true\n                                        : false;\n                // Check if control exists in advgbBlockControls array\n                const controlExists = controlsAdded &&\n                                    advgbBlockControls.some( (element) => element.control === control )\n                                        ? true\n                                        : false;\n\n                if( controlExists ) {\n                    const itemIndex = advgbBlockControls.findIndex(element => element.control === control);\n\n                    // No control found (this check seems not necessary but is here to prevent an unlikely error)\n                    if( itemIndex < 0 ) {\n                        return false;\n                    }\n\n                    let newArray    = [...advgbBlockControls];\n                    const obj       = newArray[itemIndex];\n\n                    newArray[itemIndex] = typeof obj[key] === 'boolean'\n                        ? { ...newArray[itemIndex], [key]: !obj[key] }\n                        : { ...newArray[itemIndex], [key]: value }\n\n                    setAttributes( {\n                        advgbBlockControls: newArray\n                    } );\n                } else if( controlsAdded && ! controlExists ) {\n\n                    // Add a new control object when other controls already exists\n                    switch( control ) {\n                        case 'schedule':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    scheduleControl\n                                ]\n                            } );\n                        break;\n\n                        case 'user_role':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    userRoleControl\n                                ]\n                            } );\n                        break;\n\n                        case 'archive':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    archiveControl\n                                ]\n                            } );\n                        break;\n\n                        case 'page':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    pageControl\n                                ]\n                            } );\n                        break;\n                    }\n                } else {\n                    // Add the first control object attribute\n                    switch( control ) {\n                        case 'schedule':\n                            setAttributes( {\n                                advgbBlockControls: [ scheduleControl ]\n                            } );\n                        break;\n\n                        case 'user_role':\n                            setAttributes( {\n                                advgbBlockControls: [ userRoleControl ]\n                            } );\n                        break;\n\n                        case 'archive':\n                            setAttributes( {\n                                advgbBlockControls: [ archiveControl ]\n                            } );\n                        break;\n\n                        case 'page':\n                            setAttributes( {\n                                advgbBlockControls: [ pageControl ]\n                            } );\n                        break;\n                    }\n                }\n            }\n\n            /**\n             * Update archive control in advgbBlockControls attribute when taxonomies value changes\n             *\n             * @since 3.1.2\n             *\n             * @param {string} topic 'taxonomies' or 'terms'\n             * @param {string} slugs The taxonomy slugs or term ids to insert/modify. e.g. ['category','post_tag'] or [82,161,99] or ['all_<taxonomy_slug>']\n             *\n             * @return {void}\n             */\n            changeArchiveControl( topic, slugs ) {\n                const { attributes, setAttributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                let taxArray        = [];\n                const controlIndex  = advgbBlockControls.findIndex(element => element.control === 'archive');\n\n                // No control found (this check seems not necessary but is here to prevent an unlikely error)\n                if( controlIndex < 0 ) {\n                    return false;\n                }\n\n                let newArray = [...advgbBlockControls];\n\n                if( topic === 'taxonomies' ) {\n\n                    // Check each taxonomy and its terms\n                    slugs.forEach( (item) => {\n\n                        // Get terms from current taxonomy (item)\n                        const taxIndex = newArray[controlIndex].taxonomies.findIndex(element => element.tax === item);\n\n                        if( taxIndex === -1 ) {\n\n                            // The last selected taxonomy\n                            taxArray.push( {\n                                tax: item,\n                                terms: [],\n                                all: true\n                            } );\n\n                        } else {\n\n                            // Existing taxonomy\n                            const terms     = newArray[controlIndex].taxonomies[taxIndex].terms.length\n                                                ? newArray[controlIndex].taxonomies[taxIndex].terms\n                                                : [];\n                            const approach  = terms.length ? 'select' : 'all';\n\n                            taxArray.push( {\n                                tax: item,\n                                terms: terms,\n                                all: terms.length ? false : true\n                            } );\n                        }\n                    } );\n\n                    newArray[controlIndex] = { ...newArray[controlIndex], ['taxonomies']: taxArray }\n\n                    setAttributes( {\n                        advgbBlockControls: newArray\n                    } );\n\n                } else if( topic === 'terms' ) {\n\n                    let terms           = {};\n                    const taxonomies    = this.currentArchiveControl( 'taxonomies' );\n\n                    // Check each term id (item). slug means the id\n                    slugs.forEach( ( item ) => {\n\n                        // Find the current term in termOptions state to use its tax later\n                        const option = this.state.termOptions.find( el => el.slug === item);\n\n                        if( terms[option.tax] === undefined ) {\n                            terms[option.tax] = [];\n                        }\n\n                        // Get taxonomy from current term (item)\n                        const taxIndex = newArray[controlIndex].taxonomies.findIndex( element => element.tax === option.tax);\n\n                        /* Taxonomy for this term is selected? Is a bit reduntant but let's make sure\n                         * Then include the term.\n                         */\n                        if( taxonomies.includes( option.tax ) ) {\n                            terms[option.tax].push( item );\n                        }\n\n                    } );\n\n                    // Update taxonomies with at least one term selected\n                    Object.keys( terms ).forEach( (tax) => {\n\n                        // Get taxonomy from current tax\n                        const taxIndex = newArray[controlIndex].taxonomies.findIndex( element => element.tax === tax);\n\n                        if( taxIndex >= 0 ) {\n                            newArray[controlIndex].taxonomies[taxIndex] = {\n                                tax: tax,\n                                terms: terms[tax],\n                                all: terms[tax].length ? false : true\n                            };\n                        }\n                    } );\n\n                    // Include taxonomies with no terms selected (empty terms[option.tax] array)\n                    taxonomies.forEach( ( tax ) => {\n                        if( ! Object.keys( terms ).includes( tax ) ) {\n\n                            // Get taxonomy from current tax\n                            const taxIndex = newArray[controlIndex].taxonomies.findIndex( element => element.tax === tax);\n\n                            if( taxIndex >= 0 ) {\n                                newArray[controlIndex].taxonomies[taxIndex] = {\n                                    tax: tax,\n                                    terms: [],\n                                    all: true\n                                };\n                            }\n                        }\n                    } );\n\n                    setAttributes( {\n                        advgbBlockControls: newArray\n                    } );\n\n                } else {\n                    // Nothing to do here\n                }\n            }\n\n            /**\n             * Return merged taxonomies or terms\n             *\n             * @since 3.1.2\n             *\n             * @param {string} topic 'taxonomies' or 'terms'\n             *\n             * @return {array} An single array with all the selected terms or taxonomies ['category','post_tag'] or [99,182,42]\n             */\n            currentArchiveControl( topic ) {\n                const { attributes, setAttributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                let result = [];\n\n                /* Get all the taxonomy objects.\n                 * e.g.\n                 * [\n                 *     { \"tax\": \"post_tag\", \"terms\": [220,221]},\n                 *     { \"tax\": \"category\", \"terms\": []}\n                 * ]\n                 */\n                const taxonomies    = currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ).length\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\n                                        : [];\n\n                if( topic === 'taxonomies' ) {\n\n                    taxonomies.forEach( (item) => {\n                        result.push(item.tax);\n                    } );\n\n                } else if( topic === 'terms' ) {\n\n                    taxonomies.forEach( (item) => {\n                        item.terms.forEach( ( el ) => {\n                            result.push( el ); // term id\n                        } );\n                    } );\n\n                } else {\n                    // Nothing to do here\n                }\n\n                return result;\n            }\n\n            /**\n             * Execute when taxonomy selection changes\n             *\n             * @since 3.1.1\n             *\n             * @return {void}\n             */\n            taxonomiesChanged() {\n                const { attributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                const currentTerms  = !! currentControlKey( advgbBlockControls, 'archive', 'terms' )\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'terms' )\n                                        : [];\n                const taxonomies    = !! currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\n                                        : [];\n\n                if( currentTerms.length ) {\n\n                   let result = [];\n                   currentTerms.forEach( ( slug ) => {\n                       const itemIndex = this.state.termOptions.findIndex( ( item ) => item.slug === slug );\n\n                       /* Get only the terms that belongs to selected taxonomies\n                        * and skip the ones that belongs to the deleted taxonomy\n                        */\n                       if( taxonomies.includes( this.state.termOptions[itemIndex].tax ) ) {\n                          result.push( this.state.termOptions[itemIndex].slug );\n                       }\n                   } );\n\n                   this.changeControlKey(\n                       'archive',\n                       'terms',\n                       result\n                   );\n                }\n\n                /* Remove term options from non-selected taxonomies.\n                 * Case scenario: the terms from the last removed taxonomy.\n                 */\n                this.setState( {\n                    termOptions: this.state.termOptions.filter( (item) => {\n                        return this.currentArchiveControl( 'taxonomies' ).includes( item.tax );\n                    } )\n                } );\n\n                // Update tax label options to \"All <taxonomy> terms\" or \"Selected <taxonomy> terms\"\n                this.modifyTaxLabels();\n            }\n\n            /**\n             * Get selected terms on first load\n             *\n             * @since 3.1.1\n             *\n             * @return {void}\n             */\n            initArchiveControl() {\n                const { advgbBlockControls } = this.props.attributes;\n\n                wp.apiFetch( {\n                    path: wp.url.addQueryArgs(\n                        'advgb/v1/terms',\n                        {\n                            taxonomies: this.currentArchiveControl( 'taxonomies' ),\n                            ids: this.currentArchiveControl( 'terms' )\n                        }\n                    )\n                } ).then( ( list ) => {\n\n                    // Update tax label options to \"All <taxonomy> terms\" or \"Selected <taxonomy> terms\"\n                    this.modifyTaxLabels();\n\n                    this.setState( {\n                        termOptions: list,\n                        initArchive: false,\n                        updateTaxLabels: false\n                    } );\n                } );\n\n\n            }\n\n            /**\n             * Initial taxonomy labels to allow \"All <taxonomy> terms\" \"Selected <taxonomy> terms\" visual indicator\n             *\n             * @since 3.1.2\n             *\n             * @return {array}\n             */\n            iniTaxLabels() {\n\n                let result = [];\n                this.getTaxonomies().forEach( (item) => {\n                    /* Item example\n                     *  {\n                     *      \"slug\": \"category\",\n                     *      \"title\": \"All Category terms\",\n                     *      \"singular\": \"Category\"\n                     *  }\n                     */\n                    result.push( {\n                        slug: item.slug,\n                        title: sprintf(\n                            __( 'All %s terms', 'advanced-gutenberg' ),\n                            item.title\n                        ),\n                        singular: item.title\n\n                    } );\n                } );\n\n                return result;\n            }\n\n            /**\n             * Modify taxonomy labels. Very similar to iniTaxLabels()\n             *\n             * @since 3.1.2\n             *\n             * @return {array}\n             */\n            modifyTaxLabels() {\n                const { advgbBlockControls } = this.props.attributes;\n\n                /* Get all selected taxonomy objects.\n                 * e.g.\n                 * [\n                 *     { \"tax\": \"post_tag\", \"terms\": [220,221]},\n                 *     { \"tax\": \"category\", \"terms\": []}\n                 * ]\n                 */\n                const taxonomies    = currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ).length\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\n                                        : [];\n\n                // Copy whole state\n                let options = [...this.state.taxModOptions];\n\n                options.forEach( (item, index) => {\n                    const tax = taxonomies.find( el => item.slug === el.tax );\n\n                    // Copy option to modify\n                    let option = { ...options[index] };\n                    // Update title value\n                    option.title = sprintf(\n                        tax === undefined || ! tax.terms.length\n                            ? __( 'All %s terms', 'advanced-gutenberg' )\n                            : __( 'Selected %s terms', 'advanced-gutenberg' ),\n                        option.singular\n                    );\n                    // Add option back to the state\n                    options[index] = option;\n                } );\n\n                // Save\n                this.setState( {\n                    taxModOptions: options,\n                    updateTaxLabels: false\n                } );\n            }\n\n            /**\n             * Search terms based on search\n             *\n             * @since 3.1.1\n             *\n             * @return {void}\n             */\n            searchTerms() {\n                const { termOptions, searchTermWord } = this.state;\n                const { advgbBlockControls } = this.props.attributes;\n\n                wp.apiFetch( {\n                    /*/ To get taxonomies\n                    path: wp.url.addQueryArgs( 'wp/v2/taxonomies', { context: 'edit' } )*/\n\n                    path: wp.url.addQueryArgs(\n                        'advgb/v1/terms',\n                        {\n                            search: searchTermWord,\n                            taxonomies: this.currentArchiveControl( 'taxonomies' )\n                        }\n                    )\n\n                } ).then( ( list ) => {\n\n                    /*/ To get taxonomies\n                    Object.keys(list).forEach( (item) => {\n                        options.push( {\n                            label: list[item].name,\n                            value: list[item].slug\n                        } );\n                    });*/\n\n                    // Merge selected terms with results from fetch\n                    let options = [ ...termOptions, ...list ];\n\n                    // Remove duplicated values\n                    options = Array.from( new Set( options.map( a => a.slug ) ) )\n                        .map( slug => {\n                            return options.find( a => a.slug === slug )\n                        });\n\n                    this.setState( {\n                        termOptions: options\n                    } );\n                } );\n            }\n\n            /**\n             * Check if we're in post edit screen\n             *\n             * @since 3.1.2\n             *\n             * @return {bool}\n             */\n            isPost() {\n                return wp.data.select('core/editor') && wp.data.select('core/editor').getCurrentPostId();\n            }\n\n            /**\n             * Get the timezone label from site settings stored in advgbBlocks object\n             *\n             * @since 3.1.4\n             *\n             * @return {bool}\n             */\n            getTimezoneLabel() {\n                return typeof advgbBlocks.timezone !== 'undefined' && advgbBlocks.timezone.length\n                    ? advgbBlocks.timezone.replace(/_/g, ' ')\n                    : __( 'WordPress settings timezone', 'advanced-gutenberg' )\n            }\n\n            /**\n             * Get the timezone slug from site settings stored in advgbBlocks object\n             *\n             * @since 3.1.4\n             *\n             * @return {bool}\n             */\n            getTimezoneSlug() {\n                return typeof advgbBlocks.timezone !== 'undefined' && advgbBlocks.timezone.length\n                    ? advgbBlocks.timezone\n                    : 'UTC'\n            }\n\n            componentDidMount() {\n                this.setState( {\n                    taxModOptions: this.iniTaxLabels()\n                } );\n            }\n\n            componentDidUpdate(prevProps, prevState) {\n                const { attributes, isSelected, name } = this.props;\n                const { advgbBlockControls } = attributes;\n                const { advgbBlockControls: prevBlockControls } = prevProps.attributes;\n                const { searchTermWord, initArchive } = this.state;\n                const { searchTermWord: prevTermWord } = prevState;\n\n                // Get human readable selected terms on block selection the first time\n                if( ! this.isPost()\n                    && ! NON_SUPPORTED_BLOCKS.includes( name )\n                    && isSelected\n                    && initArchive\n                    && isControlEnabled( advgb_block_controls_vars.controls.archive )\n                    && currentControlKey( advgbBlockControls, 'archive', 'enabled' )\n                    && this.currentArchiveControl( 'taxonomies' ).length\n                    && this.currentArchiveControl( 'terms' ).length\n                ) {\n                    this.initArchiveControl();\n                }\n\n                // Search terms\n                if( searchTermWord !== prevTermWord && searchTermWord.length > 2 ) {\n                    this.searchTerms();\n                }\n\n                // Update available terms and remove terms which taxonomy has been removed\n                if( ! this.isPost()\n                    && isControlEnabled( advgb_block_controls_vars.controls.archive )\n                    && currentControlKey( advgbBlockControls, 'archive', 'enabled' )\n                    && (\n                        currentControlKey( prevBlockControls, 'archive', 'taxonomies' ) !== currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ) // This trigger works when taxo changes, but not terms\n                        || this.state.updateTaxLabels // Trigger when terms changes\n                    )\n                ) {\n                    this.taxonomiesChanged();\n                }\n            }\n\n            render() {\n                const { attributes, setAttributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                return ( [\n                        this.props.isSelected && ( ! NON_SUPPORTED_BLOCKS.includes( this.props.name ) )\n                        && isAnyControlEnabledGlobal() &&\n                        <InspectorControls key=\"advgb-bc-controls\">\n                            <PanelBody\n                                title={ __( 'Block Controls', 'advanced-gutenberg' ) }\n                                icon=\"visibility\"\n                                initialOpen={ false }\n                                className={\n                                    isAnyControlEnabledBlock( advgbBlockControls )\n                                        ? 'advgb-feature-icon-active' : ''\n                                }\n                            >\n                                { isControlEnabled( advgb_block_controls_vars.controls.schedule ) && (\n                                <Fragment>\n                                    <ToggleControl\n                                        label={ __( 'Schedule', 'advanced-gutenberg' ) }\n                                        help={ currentControlKey( advgbBlockControls, 'schedule', 'enabled' )\n                                            ? __( 'Choose when to start showing and/or stop showing this block.', 'advanced-gutenberg' )\n                                            : ''\n                                        }\n                                        checked={ currentControlKey( advgbBlockControls, 'schedule', 'enabled' ) }\n                                        onChange={ () => this.changeControlKey( 'schedule', 'enabled' ) }\n                                    />\n                                    { currentControlKey( advgbBlockControls, 'schedule', 'enabled' ) && (\n                                        <Fragment>\n                                            <div style={ { marginBottom: 30 } }>\n                                                <AdvDateTimeControl\n                                                    buttonLabel={ __( 'Now', 'advanced-gutenberg' ) }\n                                                    dateLabel={ __( 'Start showing', 'advanced-gutenberg' ) }\n                                                    date={ currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) }\n                                                    onChangeDate={ ( newDate ) => this.changeControlKey( 'schedule', 'dateFrom', newDate ) }\n                                                    onDateClear={ () => this.changeControlKey( 'schedule', 'dateFrom', null ) }\n                                                    onInvalidDate={ false }\n                                                />\n                                                <AdvDateTimeControl\n                                                    buttonLabel={ __( 'Never', 'advanced-gutenberg' ) }\n                                                    dateLabel={ __( 'Stop showing', 'advanced-gutenberg' ) }\n                                                    date={ !! currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) ? currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) : null }\n                                                    onChangeDate={ ( newDate ) => this.changeControlKey( 'schedule', 'dateTo', newDate ) }\n                                                    onDateClear={ () => this.changeControlKey( 'schedule', 'dateTo', null ) }\n                                                    onInvalidDate={ ( date ) => {\n                                                        // Disable all dates before dateFrom\n                                                        if( currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) ) {\n                                                            let thisDate = new Date(date.getTime());\n                                                            thisDate.setHours(0, 0, 0, 0);\n                                                            let fromDate = new Date( currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) );\n                                                            fromDate.setHours(0, 0, 0, 0);\n                                                            return thisDate.getTime() < fromDate.getTime();\n                                                        }\n                                                    } }\n                                                />\n                                                { ( currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) > currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) ) &&\n                                                    <Notice\n                                                        className=\"advgb-notice-sidebar\"\n                                                        status=\"warning\"\n                                                        isDismissible={ false }\n                                                    >\n                                                        { __( '\"Stop showing\" date should be after \"Start showing\" date!', 'advanced-gutenberg' ) }\n                                                    </Notice>\n                                                }\n                                                { currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) && currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) &&\n                                                    <ToggleControl\n                                                        label={ __( 'Recurring', 'advanced-gutenberg' ) }\n                                                        checked={ currentControlKey( advgbBlockControls, 'schedule', 'recurring' ) }\n                                                        onChange={ () => this.changeControlKey( 'schedule', 'recurring' ) }\n                                                        help={ __( 'If Recurring is enabled, this block will be displayed every year between the selected dates.', 'advanced-gutenberg' ) }\n                                                    />\n                                                }\n                                                <AdvDaysControl\n                                                    label={ __( 'On these days (optional)', 'advanced-gutenberg' ) }\n                                                    days={\n                                                        !! currentControlKey( advgbBlockControls, 'schedule', 'days' )\n                                                            ? currentControlKey( advgbBlockControls, 'schedule', 'days' )\n                                                            : []\n                                                    }\n                                                    onChangeDays={ ( value ) => this.changeControlKey( 'schedule', 'days', value ) }\n                                                />\n                                                <label style={ { marginBottom: 8, display: 'block' } }>\n                                                    { __( 'Between these times (optional)', 'advanced-gutenberg' ) }\n                                                </label>\n                                                <AdvTimeControl\n                                                    label={ __( 'From', 'advanced-gutenberg' ) }\n                                                    currentTime={\n                                                        !! currentControlKey( advgbBlockControls, 'schedule', 'timeFrom' )\n                                                            ? currentControlKey( advgbBlockControls, 'schedule', 'timeFrom' )\n                                                            : null\n                                                    }\n                                                    onChangeTime={\n                                                        ( newTime ) => this.changeControlKey(\n                                                            'schedule',\n                                                            'timeFrom',\n                                                            newTime\n                                                        )\n                                                    }\n                                                    onTimeClear={ () => this.changeControlKey( 'schedule', 'timeFrom', null ) }\n                                                />\n                                                <AdvTimeControl\n                                                    label={ __( 'To', 'advanced-gutenberg' ) }\n                                                    currentTime={\n                                                        currentControlKey( advgbBlockControls, 'schedule', 'timeTo' ) || null\n                                                    }\n                                                    onChangeTime={\n                                                        ( newTime ) => this.changeControlKey(\n                                                            'schedule',\n                                                            'timeTo',\n                                                            newTime\n                                                        )\n                                                    }\n                                                    onTimeClear={ () => this.changeControlKey( 'schedule', 'timeTo', null ) }\n                                                />\n                                                { (\n                                                    currentControlKey( advgbBlockControls, 'schedule', 'timeFrom' )\n                                                    && currentControlKey( advgbBlockControls, 'schedule', 'timeTo' )\n                                                    && (\n                                                        '01/01/2020T' + currentControlKey( // We append a dummy date to make a datetime comparison\n                                                            advgbBlockControls, 'schedule', 'timeFrom'\n                                                        ) >= '01/01/2020T' + currentControlKey( // We append a dummy date to make a datetime comparison\n                                                            advgbBlockControls, 'schedule', 'timeTo'\n                                                        )\n                                                    )\n                                                ) &&\n                                                    <Notice\n                                                        className=\"advgb-notice-sidebar\"\n                                                        status=\"warning\"\n                                                        isDismissible={ false }\n                                                    >\n                                                        { __( '\"To\" time should be after \"From\" time!', 'advanced-gutenberg' ) }\n                                                    </Notice>\n                                                }\n                                                { (\n                                                    (\n                                                        currentControlKey( advgbBlockControls, 'schedule', 'timeFrom' )\n                                                        && ! currentControlKey( advgbBlockControls, 'schedule', 'timeTo' )\n                                                    ) || (\n                                                        ! currentControlKey( advgbBlockControls, 'schedule', 'timeFrom' )\n                                                        && currentControlKey( advgbBlockControls, 'schedule', 'timeTo' )\n                                                    )\n                                                ) &&\n                                                    <Notice\n                                                        className=\"advgb-notice-sidebar\"\n                                                        status=\"warning\"\n                                                        isDismissible={ false }\n                                                    >\n                                                        { __( 'Please choose \"From\" time and \"To\" time.', 'advanced-gutenberg' ) }\n                                                    </Notice>\n                                                }\n                                                <AdvTimezoneControl\n                                                    label={ __( 'Timezone', 'advanced-gutenberg' ) }\n                                                    defaultTimezone={ this.getTimezoneLabel()  }\n                                                    value={\n                                                        currentControlKey( advgbBlockControls, 'schedule', 'timezone' )\n                                                            ? currentControlKey( advgbBlockControls, 'schedule', 'timezone' )\n                                                            : this.getTimezoneSlug()\n                                                    }\n                                                    onChangeTimezone={ ( value ) => this.changeControlKey( 'schedule', 'timezone', value ) }\n                                                />\n                                            </div>\n                                        </Fragment>\n                                    ) }\n                                </Fragment>\n                                ) }\n                                { isControlEnabled( advgb_block_controls_vars.controls.user_role ) && (\n                                <Fragment>\n                                    <ToggleControl\n                                        label={ __( 'User roles', 'advanced-gutenberg' ) }\n                                        help={ currentControlKey( advgbBlockControls, 'user_role', 'enabled' )\n                                            ? __( 'Choose which users can see this block.', 'advanced-gutenberg' )\n                                            : ''\n                                        }\n                                        checked={ currentControlKey( advgbBlockControls, 'user_role', 'enabled' ) }\n                                        onChange={ () => this.changeControlKey( 'user_role', 'enabled' ) }\n                                    />\n                                    { currentControlKey( advgbBlockControls, 'user_role', 'enabled' ) && (\n                                        <Fragment>\n                                            <div className=\"advgb-revert-mb\">\n                                                <SelectControl\n                                                    value={\n                                                        currentControlKey( advgbBlockControls, 'user_role', 'approach' )\n                                                    }\n                                                    options={ [\n                                                        {\n                                                            value: 'public',\n                                                            label: __( 'Show to everyone', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'hidden',\n                                                            label: __( 'Hide from everyone', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'login',\n                                                            label: __( 'Show to logged in users', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'logout',\n                                                            label: __( 'Show to logged out users', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'include',\n                                                            label: __( 'Show to the selected user roles', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'exclude',\n                                                            label: __( 'Hide from the selected user roles', 'advanced-gutenberg' )\n                                                        }\n                                                    ] }\n                                                    onChange={ ( value ) => this.changeControlKey( 'user_role', 'approach', value ) }\n                                                />\n                                            </div>\n                                            { ( currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'include' ||\n                                                currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'exclude'\n                                            ) && (\n                                                <Fragment>\n                                                    <FormTokenField\n                                                        multiple\n                                                        label={ __( 'Select user roles', 'advanced-gutenberg' ) }\n                                                        placeholder={ __( 'Search', 'advanced-gutenberg' ) }\n                                                        suggestions={ getOptionSuggestions( this.getUserRoles() ) }\n                                                        maxSuggestions={ 10 }\n                                                        value={\n                                                            getOptionTitles(\n                                                                !! currentControlKey( advgbBlockControls, 'user_role', 'roles' )\n                                                                    ? currentControlKey( advgbBlockControls, 'user_role', 'roles' )\n                                                                    : [],\n                                                                this.getUserRoles()\n                                                            )\n                                                        }\n                                                        onChange={ ( value ) => {\n                                                            this.changeControlKey( 'user_role', 'roles', getOptionSlugs( value, this.getUserRoles() ) )\n                                                        } }\n                                                        __experimentalExpandOnFocus\n                                                    />\n                                                    { ( currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'include' ||\n                                                        currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'exclude'\n                                                    )\n                                                    && ! currentControlKey( advgbBlockControls, 'user_role', 'roles' ).length && (\n                                                        <Notice\n                                                                className=\"advgb-notice-sidebar\"\n                                                                status=\"warning\"\n                                                                isDismissible={ false }\n                                                                style={ { marginBottom: 30 } }\n                                                            >\n                                                            {\n                                                                __(\n                                                                    'Please select at least one user role.',\n                                                                    'advanced-gutenberg'\n                                                                )\n                                                            }\n                                                        </Notice>\n                                                    ) }\n                                                </Fragment>\n                                            ) }\n                                        </Fragment>\n                                    ) }\n                                </Fragment>\n                                ) }\n                                { ! this.isPost() && ( // Disabled in post edit\n                                    <Fragment>\n                                        { isControlEnabled( advgb_block_controls_vars.controls.archive ) && (\n                                        <Fragment>\n                                            <ToggleControl\n                                                label={ __( 'Term archives', 'advanced-gutenberg' ) }\n                                                help={ currentControlKey( advgbBlockControls, 'archive', 'enabled' )\n                                                    ? __( 'Choose on which taxonomies and terms archive pages your blocks can be displayed.', 'advanced-gutenberg' )\n                                                    : ''\n                                                }\n                                                checked={ currentControlKey( advgbBlockControls, 'archive', 'enabled' ) }\n                                                onChange={ () => this.changeControlKey( 'archive', 'enabled' ) }\n                                            />\n                                            { currentControlKey( advgbBlockControls, 'archive', 'enabled' ) && (\n                                                <Fragment>\n                                                    <div className=\"advgb-revert-mb--disabled\" style={{ marginBottom: 20 }}>\n                                                        <SelectControl\n                                                            value={\n                                                                currentControlKey( advgbBlockControls, 'archive', 'approach' )\n                                                            }\n                                                            options={ [\n                                                                {\n                                                                    value: 'include',\n                                                                    label: __( 'Show for selected terms', 'advanced-gutenberg' )\n                                                                },\n                                                                {\n                                                                    value: 'exclude',\n                                                                    label: __( 'Hide for selected terms', 'advanced-gutenberg' )\n                                                                }\n                                                            ] }\n                                                            onChange={ ( value ) => this.changeControlKey( 'archive', 'approach', value ) }\n                                                        />\n                                                    </div>\n                                                    <FormTokenField\n                                                        multiple\n                                                        label={ __( 'Select taxonomies', 'advanced-gutenberg' ) }\n                                                        placeholder={ __( 'Search taxonomies', 'advanced-gutenberg' ) }\n                                                        suggestions={ getOptionSuggestions( this.state.taxModOptions || this.getTaxonomies() ) }\n                                                        maxSuggestions={ 10 }\n                                                        value={\n                                                            getOptionTitles(\n                                                                this.currentArchiveControl( 'taxonomies' ),\n                                                                this.state.taxModOptions || this.getTaxonomies()\n                                                            )\n                                                        }\n                                                        onChange={ ( value ) => {\n                                                            this.changeArchiveControl(\n                                                                'taxonomies',\n                                                                getOptionSlugs( value, this.state.taxModOptions || this.getTaxonomies() )\n                                                            );\n                                                        } }\n                                                        __experimentalExpandOnFocus\n                                                    />\n                                                    { ( currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ).length > 0 ) && (\n                                                        <Fragment>\n                                                            <FormTokenField\n                                                                multiple\n                                                                label={ __( 'Filter terms', 'advanced-gutenberg' ) }\n                                                                placeholder={ __( 'Search terms', 'advanced-gutenberg' ) }\n                                                                suggestions={ getOptionSuggestions(\n                                                                    this.state.termOptions\n                                                                ) }\n                                                                maxSuggestions={ 10 }\n                                                                value={\n                                                                    getOptionTitles(\n                                                                        this.currentArchiveControl( 'terms' ),\n                                                                        this.state.termOptions\n                                                                    )\n                                                                }\n                                                                onChange={ ( value ) => {\n                                                                    this.changeArchiveControl(\n                                                                        'terms',\n                                                                        getOptionSlugs(\n                                                                            value,\n                                                                            this.state.termOptions\n                                                                        )\n                                                                    );\n                                                                    this.setState( {\n                                                                        updateTaxLabels: true\n                                                                    } );\n                                                                } }\n                                                                onInputChange={ ( value ) => {\n                                                                    this.setState( {\n                                                                        searchTermWord: value\n                                                                    } );\n                                                                } }\n                                                                __experimentalShowHowTo={ false }\n                                                            />\n                                                            <div className=\"advgb-revert-mb--disabled components-form-token-field__help\"\n                                                                style={{ marginBottom: 20 }}>\n                                                                { __(\n                                                                    'Use this filter to apply only to some terms.',\n                                                                    'advanced-gutenberg'\n                                                                ) }\n                                                            </div>\n                                                        </Fragment>\n                                                    ) }\n                                                </Fragment>\n                                            ) }\n                                        </Fragment>\n                                        ) }\n\n                                        { isControlEnabled( advgb_block_controls_vars.controls.page ) && (\n                                        <Fragment>\n                                            <ToggleControl\n                                                label={ __( 'Pages', 'advanced-gutenberg' ) }\n                                                help={ currentControlKey( advgbBlockControls, 'page', 'enabled' )\n                                                    ? __( 'Choose in which pages this block can be displayed.', 'advanced-gutenberg' )\n                                                    : ''\n                                                }\n                                                checked={ currentControlKey( advgbBlockControls, 'page', 'enabled' ) }\n                                                onChange={ () => this.changeControlKey( 'page', 'enabled' ) }\n                                            />\n                                            { currentControlKey( advgbBlockControls, 'page', 'enabled' ) && (\n                                                <Fragment>\n                                                    <div className=\"advgb-revert-mb\">\n                                                        <SelectControl\n                                                            value={\n                                                                currentControlKey( advgbBlockControls, 'page', 'approach' )\n                                                            }\n                                                            options={ [\n                                                                {\n                                                                    value: 'include',\n                                                                    label: __( 'Show on the selected pages', 'advanced-gutenberg' )\n                                                                },\n                                                                {\n                                                                    value: 'exclude',\n                                                                    label: __( 'Hide on the selected pages', 'advanced-gutenberg' )\n                                                                }\n                                                            ] }\n                                                            onChange={ ( value ) => this.changeControlKey( 'page', 'approach', value ) }\n                                                        />\n                                                    </div>\n                                                    { ( currentControlKey( advgbBlockControls, 'page', 'approach' ) === 'include' ||\n                                                        currentControlKey( advgbBlockControls, 'page', 'approach' ) === 'exclude'\n                                                    ) && (\n                                                        <FormTokenField\n                                                            multiple\n                                                            label={ __( 'Select pages', 'advanced-gutenberg' ) }\n                                                            placeholder={ __( 'Search', 'advanced-gutenberg' ) }\n                                                            suggestions={ getOptionSuggestions( this.getPages() ) }\n                                                            maxSuggestions={ 10 }\n                                                            value={\n                                                                getOptionTitles(\n                                                                    !! currentControlKey( advgbBlockControls, 'page', 'pages' )\n                                                                        ? currentControlKey( advgbBlockControls, 'page', 'pages' )\n                                                                        : [],\n                                                                    this.getPages()\n                                                                )\n                                                            }\n                                                            onChange={ ( value ) => {\n                                                                this.changeControlKey( 'page', 'pages', getOptionSlugs( value, this.getPages() ) )\n                                                            } }\n                                                            __experimentalExpandOnFocus\n                                                        />\n                                                    ) }\n                                                </Fragment>\n                                            ) }\n                                        </Fragment>\n                                        ) }\n                                    </Fragment>\n                                ) }\n                            </PanelBody>\n                        </InspectorControls>,\n                        <BlockEdit key=\"block-edit-advgb-dates\" {...this.props} />,\n                    ] )\n            }\n        }\n    }, 'withEditControls' );\n\n    // Add option to add controls for supported blocks\n    addFilter( 'editor.BlockEdit', 'advgb/addBlockControls', withEditControls );\n\n    const withAttributes = createHigherOrderComponent( ( BlockListBlock ) => {\n        return ( props ) => {\n            if ( ( !NON_SUPPORTED_BLOCKS.includes( props.name ) ) && hasBlockSupport( props.name, 'advgb/blockControls', true ) && isAnyControlEnabledGlobal() ) {\n                const { advgbBlockControls } = props.attributes;\n                const advgbBcClass = props.isSelected === false\n                    && isAnyControlEnabledBlock( advgbBlockControls )\n                        ? 'advgb-bc-editor-preview' : '';\n\n                return <BlockListBlock { ...props } className={ classnames( props.className, advgbBcClass ) } advgbBlockControls={ `${ advgbBlockControls }` } />;\n            }\n\n            return <BlockListBlock { ...props } />;\n        };\n    }, 'withAttributes' );\n\n    // Apply attributes and CSS classes on backend\n    addFilter( 'editor.BlockListBlock', 'advgb/loadBackendBlockControls', withAttributes );\n\n})( wp.i18n, wp.hooks, wp.blocks, wp.blockEditor, wp.components, wp.compose, wp.element );\n"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","includes","key","call","join","module","exports","default","to12Hour","hour","meridiem","meridian","to24Hour","time","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","obj","prop","_wp$components","wp","components","ButtonGroup","Button","DateTimePicker","CheckboxControl","TextControl","Popover","Tooltip","SelectControl","Icon","_wp$element","element","Component","Fragment","useState","_wp$i18n","i18n","__","_x","applyFilters","hooks","AdvDateTimeControl","props","_useState2","_slicedToArray","popupState","setPopupState","togglePopup","buttonLabel","dateLabel","date","onChangeDate","onDateClear","onInvalidDate","React","createElement","className","isLink","icon","onClick","text","moment","format","onClose","bind","resize","currentDate","onChange","is12Hour","isInvalidDate","AdvDaysControl","allDays","slug","label","days","onChangeDays","_useState4","selectedDays","setSelectedDays","isDaySelected","some","el","map","day","checked","updatedDays","filter","findDay","find","concat","_toConsumableArray","uniqueDays","Set","onChangeDay","AdvTimeClass","_Component","_inherits","_super","_this","_classCallCheck","state","onChangeTime","currentTime","hours","minutes","onInit","value","_this$state","this","setState","split","parseInt","prevProps","prevState","_this$props","_this$state2","prevHours","prevMinutes","prevMeridian","savedTime","appendZero","hourConvert","isNaN","res","_this2","_this$state3","type","event","Math","max","min","Number","target","onKeyDown","placeholder","variant","disabled","onTimeClear","AdvTimeControl","AdvTimezoneControl","defaultTimezone","style","marginTop","marginBottom","float","marginRight","href","class","options","getOptionSuggestions","item","title","getOptionTitles","slugs","field_value","option_slug","find_option","getOptionSlugs","slugs_array","option_title","matching_slug","wpI18n","wpHooks","wpBlocks","wpBlockEditor","wpComponents","wpCompose","wpElement","blockEditor","editor","addFilter","sprintf","hasBlockSupport","_wpBlockEditor","InspectorControls","ToggleControl","BlockControls","PanelBody","Notice","FormTokenField","createHigherOrderComponent","advgbBlocks","block_controls","NON_SUPPORTED_BLOCKS","getGlobalControls","advgb_block_controls_vars","controls","keys","isControlEnabled","control","isAnyControlEnabledBlock","controlAttrs","globalControls","counter","blockControls","forEach","currentControlKey","isAnyControlEnabledGlobal","itemIndex","findIndex","non_supported","settings","name","attributes","assign","advgbBlockControls","items","withEditControls","BlockEdit","BlockControlsEdit","taxModOptions","termOptions","searchTermWord","initArchive","updateTaxLabels","isPost","_assertThisInitialized","taxonomies","terms","getTaxonomies","tax","allTaxonomies","term","user_roles","_this3","page","setAttributes","scheduleControl","enabled","dateFrom","dateTo","recurring","userRoleControl","roles","approach","archiveControl","pageControl","pages","controlsAdded","controlExists","newArray","_objectSpread","_defineProperty","topic","_this4","_this$props2","taxArray","controlIndex","taxIndex","all","currentArchiveControl","option","_this$props3","result","_this5","currentTerms","changeControlKey","modifyTaxLabels","_this6","apiFetch","path","url","addQueryArgs","ids","then","list","singular","index","_this7","search","from","data","select","getCurrentPostId","timezone","replace","iniTaxLabels","_this$props4","isSelected","prevBlockControls","prevTermWord","archive","initArchiveControl","searchTerms","taxonomiesChanged","_this8","_this$props5","initialOpen","schedule","help","newDate","thisDate","Date","getTime","setHours","fromDate","status","isDismissible","display","newTime","getTimezoneLabel","getTimezoneSlug","onChangeTimezone","user_role","multiple","suggestions","getUserRoles","maxSuggestions","__experimentalExpandOnFocus","changeArchiveControl","onInputChange","__experimentalShowHowTo","getPages","_extends","BlockListBlock","advgbBcClass","classnames","blocks","compose"],"sourceRoot":""}